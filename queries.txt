Attention: these queries are for a slightly different database than the one in the picture.

1. Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)

SELECT * FROM `events` WHERE `price` IS NULL;

2. Selezionare tutte le location in ordine alfabetico (82)

SELECT * FROM `locations` ORDER BY `name`;

3. Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)

SELECT * FROM `events` WHERE `price` < 20 AND `duration` < '03:00:00';

4. Selezionare tutti gli eventi di dicembre 2023 (25)

SELECT * FROM `events` WHERE `start` BETWEEN '2023-12-01 00:00:00' AND '2023-12-31 23:59:59';

5. Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)

SELECT * FROM `events` WHERE `duration` > '02:00:00'; (escono 946 risultati. Il numero 823 esce se si selezionano gli eventi con una durata maggiore o uguale alle 3 ore, che è una richiesta differente.)

6. Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)

SELECT 
  `name`, 
  DATE(`start`) AS `start_date`,
  TIME(`start`) AS `start_time`,
  TIME(ADDTIME(`start`, `duration`)) AS `end_time`,
  `duration` AS `total_duration`
FROM `events`;

7. Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)

SELECT * FROM `events` WHERE `user_id` = 1202;

8. Selezionare il numero totale di eventi per ogni fascia di prezzo (81)

SELECT `price`, COUNT(*) AS `event_count` FROM `events` GROUP BY `price`;

9. Selezionare tutti gli utenti admin ed editor (9)

SELECT * FROM `users`
INNER JOIN `roles` ON `users`.`role_id` = `roles`.`id`
WHERE `roles`.`name` IN ('admin', 'editor');

10. Selezionare tutti i concerti (eventi con il tag “concerti”) (72)

SELECT `events`.* FROM `events`
INNER JOIN `event_tag` ON `events`.`id` = `event_tag`.`event_id`
INNER JOIN `tags` ON `event_tag`.`tag_id` = `tags`.`id`
WHERE `tags`.`name` = 'Concerti';

11. Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)

SELECT 
  `tags`.`name` AS `tag_name`, 
  AVG(`events`.`price`) AS `average_price`
FROM `tags`
INNER JOIN `event_tag` ON `tags`.`id` = `event_tag`.`tag_id`
INNER JOIN `events` ON `event_tag`.`event_id` = `events`.`id`
GROUP BY `tags`.`name`;

12. Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)

SELECT 
  `locations`.`name` AS `location_name`, 
  COUNT(`events`.`id`) AS `event_count`
FROM `locations`
LEFT JOIN `events` ON `locations`.`id` = `events`.`location_id`
GROUP BY `locations`.`name`;


13. Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)

SELECT `users`.* FROM `users`
INNER JOIN `bookings` ON `users`.`id` = `bookings`.`user_id`
WHERE `bookings`.`event_id` = 34;

14. Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)

SELECT
    `users`.`first_name`,
    `users`.`last_name`
FROM
    `users`
INNER JOIN `bookings` ON `users`.`id` = `bookings`.`user_id`
WHERE
    `bookings`.`event_id` = 2;

15. Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)

SELECT
    `events`.*
FROM
    `events`
INNER JOIN `bookings` ON `events`.`id` = `bookings`.`event_id`
GROUP BY
    `events`.`id`
HAVING
    COUNT(`bookings`.`id`) = `events`.`total_tickets`;

16. Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)

SELECT
    `locations`.`name` AS `location_name`,
    COUNT(`events`.`id`) AS `event_count`
FROM
    `locations`
LEFT JOIN `events` ON `locations`.`id` = `events`.`location_id`
GROUP BY
    `locations`.`id`
ORDER BY
    `event_count`
DESC;

17. Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)

SELECT
    `users`.*
FROM
    `users`
INNER JOIN `bookings` ON `users`.`id` = `bookings`.`user_id`
GROUP BY
    `users`.`id`
HAVING
    COUNT(`bookings`.`id`) > 70;

18. Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)

SELECT
    `events`.`name` AS `event_name`,
    `locations`.`name` AS `location_name`,
    COUNT(`bookings`.`id`) AS `number_of_bookings`,
    (
        `events`.`total_tickets` - COUNT(`bookings`.`id`)
    ) AS `available_tickets`
FROM
    `events`
LEFT JOIN `locations` ON `events`.`location_id` = `locations`.`id`
LEFT JOIN `bookings` ON `events`.`id` = `bookings`.`event_id`
GROUP BY
    `events`.`id`;